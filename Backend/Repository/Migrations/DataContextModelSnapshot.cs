// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("DataModel.Answer", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Answers");

                    b.HasDiscriminator().HasValue("Answer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataModel.Match", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerKey")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("PlayerKey");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("DataModel.Player", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MatchKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("MatchKey");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DataModel.Question", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<uint?>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MatchKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("MatchKey");

                    b.ToTable("Questions");

                    b.HasDiscriminator().HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataModel.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("DataModel.Answer");

                    b.Property<uint?>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MultipleChoiceQuestionKey")
                        .HasColumnType("TEXT");

                    b.HasIndex("MultipleChoiceQuestionKey");

                    b.HasDiscriminator().HasValue("MultipleChoiceAnswer");
                });

            modelBuilder.Entity("DataModel.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("DataModel.Question");

                    b.Property<Guid?>("CorrectAnswerKey")
                        .HasColumnType("TEXT");

                    b.HasIndex("CorrectAnswerKey");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("DataModel.Match", b =>
                {
                    b.HasOne("DataModel.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataModel.Player", b =>
                {
                    b.HasOne("DataModel.Match", null)
                        .WithMany("Contestants")
                        .HasForeignKey("MatchKey");
                });

            modelBuilder.Entity("DataModel.Question", b =>
                {
                    b.HasOne("DataModel.Match", null)
                        .WithMany("PlayedQuestions")
                        .HasForeignKey("MatchKey");
                });

            modelBuilder.Entity("DataModel.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("DataModel.MultipleChoiceQuestion", null)
                        .WithMany("WrongAnswers")
                        .HasForeignKey("MultipleChoiceQuestionKey");
                });

            modelBuilder.Entity("DataModel.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("DataModel.MultipleChoiceAnswer", "CorrectAnswer")
                        .WithMany()
                        .HasForeignKey("CorrectAnswerKey");

                    b.Navigation("CorrectAnswer");
                });

            modelBuilder.Entity("DataModel.Match", b =>
                {
                    b.Navigation("Contestants");

                    b.Navigation("PlayedQuestions");
                });

            modelBuilder.Entity("DataModel.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("WrongAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
